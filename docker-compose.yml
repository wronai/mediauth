
services:
  # ============ REVERSE PROXY + AUTH ============
  caddy:
    image: caddy:2-alpine
    environment:
      - FRONTEND_DOMAIN=${FRONTEND_DOMAIN:-upload.localhost}
      - API_DOMAIN=${API_DOMAIN:-api.localhost}
      - MANAGER_DOMAIN=${MANAGER_DOMAIN:-manager.localhost}
      - ADMIN_DOMAIN=${ADMIN_DOMAIN:-admin.localhost}
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
    networks:
      - app_network
    restart: unless-stopped

  # ============ ALL-IN-ONE BACKEND ============
  backend:
    build: ./services
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - JWT_SECRET=${JWT_SECRET:-superSecretJwtKey}
      - DATABASE_URL=postgres://postgres:${POSTGRES_PASSWORD:-secret}@postgres:5432/uploaddb
      - REDIS_URL=redis://redis:6379
    volumes:
      - upload_files:/app/uploads
    networks:
      - app_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # ============ FRONTEND ============
  frontend:
    build: ./frontend
    environment:
      - REACT_APP_API_URL=https://${API_DOMAIN:-api.localhost}
    networks:
      - app_network
    restart: unless-stopped

  # ============ STORAGE ============
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=uploaddb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secret}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  caddy_data:
  postgres_data:
  upload_files:
